{"version":3,"sources":["HOC/AuthWithRedirect.tsx","Profile/ProfileInfo.module.css","Profile/MyPosts.module.css","Profile/MyPosts/Post/Post.module.css","Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","Profile/ProfileInfo/ProfileData/Contact/Contact.tsx","Profile/ProfileInfo/ProfileData/ProfileData.tsx","Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","Profile/ProfileInfo/ProfileInfo.tsx","Profile/MyPosts/Post/Post.tsx","Profile/MyPosts.tsx","Profile/MyPostsContainer.tsx","Profile/Profile.tsx","Profile/ProfileInfo/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","authState","WithAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","Contact","contactTitle","contactValue","className","s","contact","ProfileData","profile","isOwner","openEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","onSubmit","formSummaryError","Field","placeholder","name","component","Input","validate","required","Textarea","type","ProfileInfo","savePhoto","saveNewProfileData","descriptionBlock","src","photos","large","userPhoto","alt","mainPhoto","target","files","length","initialValues","formData","then","Preloader","Post","item","message","likesCount","MyPosts","React","memo","postsElements","posts","reverse","p","id","postsBlock","AddNewPostReduxForm","values","addPost","newPostText","maxLength","maxLengthCreator","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","updateStatusProfile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatusProfile","refreshProfile","prevProps","compose","withRouter"],"mappings":"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","file":"static/js/3.7df91fba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../Redux/redux-store\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.authState.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent;\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ProfileInfo_img__2BcLQ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3wsbG\",\"contact\":\"ProfileInfo_contact__14-mn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3gZQt\",\"posts\":\"MyPosts_posts__1Ns4x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__xU5gN\"};","import React, {useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string | null) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status</b>:<span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus onBlur={deactivateEditMode} onChange={onStatusChange}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport s from \"../../../ProfileInfo.module.css\";\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}>\r\n        <b>{contactTitle}</b>:{contactValue}\r\n    </div>\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport {ProfileType} from \"../../../Redux/profile-reducer\";\r\nimport Contact from \"./Contact/Contact\";\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    openEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, openEditMode}) => {\r\n\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={openEditMode}>EDIT</button>\r\n        </div>}\r\n\r\n        <div><b>Full name</b>: {profile.fullName}</div>\r\n        <div><b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n        {\r\n            profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n\r\n        <div><b>About me</b>: {profile.aboutMe}</div>\r\n\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                //@ts-ignore\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            }\r\n        )}\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nexport default ProfileData;\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {ProfileType} from \"../../../Redux/profile-reducer\";\r\nimport {required} from '../../../Utils/Validators/validators';\r\nimport {Input, Textarea} from \"../../../Common Components/FormsControls/FormsControls\";\r\nimport s from '../../../Common Components/FormsControls/FormsControls.module.css';\r\n\r\n\r\nexport  type FormDataType = {}\r\n\r\nexport  type IProps = {\r\n    profile: ProfileType\r\n    initialValues: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormDataType, IProps> & IProps> =\r\n    ({handleSubmit, profile, error}) => {\r\n        return <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>SAVE</button>\r\n            </div>\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div><b>Full Name</b>: {<Field placeholder={'Full Name'} name={'fullName'} component={Input}\r\n                                           validate={[required]}/>}</div>\r\n            <div><b>About Me</b>: {<Field placeholder={'About Me'} name={'aboutMe'} component={Textarea}\r\n                                          validate={[required]}/>}</div>\r\n            <div><b>Looking For A Job</b>: {<Field type={'checkbox'} value={'LookingForAJob'} name={'LookingForAJob'}\r\n                                                   component={Input}/>}</div>\r\n            <div><b>Looking For A Job Description</b>: {<Field placeholder={'Looking For A Job Description'}\r\n                                                               name={'lookingForAJobDescription'} component={Textarea}\r\n                                                               validate={[required]}/>}</div>\r\n\r\n\r\n            <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}><b>{key}:</b><Field placeholder={key} name={`contacts.${key}`}\r\n                                                          component={Input}/>\r\n                </div>\r\n            })}\r\n            </div>\r\n\r\n        </form>\r\n    }\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm<FormDataType, IProps>({form: 'edit-mode-profile'})(ProfileDataForm)\r\nexport default ProfileDataReduxForm\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from '../ProfileInfo.module.css';\r\nimport Preloader from \"../../Common Components/Preloader/Preloader\";\r\nimport {ProfileType} from '../../Redux/profile-reducer';\r\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\r\nimport userPhoto from '../../Assets/Images/people.png'\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string | null) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveNewProfileData: (formData: any) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({\r\n                                                    profile, status, updateStatus,\r\n                                                    isOwner, savePhoto, saveNewProfileData\r\n                                                }) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const openEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // @ts-ignore\r\n        if (e.target.files.length) {\r\n            // @ts-ignore\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmitEdit = (formData: any) => {\r\n        // @ts-ignore\r\n        saveNewProfileData(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} alt={'nice view'} className={s.mainPhoto}/>\r\n\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {\r\n                    editMode\r\n                        ? <ProfileDataForm profile={profile}\r\n                            // @ts-ignore\r\n                                           initialValues={profile}\r\n                                           onSubmit={onSubmitEdit}/>\r\n                        : <ProfileData profile={profile} isOwner={isOwner} openEditMode={openEditMode}/>\r\n                }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype MessageType = {\r\n    message: string;\r\n    likesCount: number;\r\n}\r\n\r\nconst Post: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img src=\"https://it-doc.info/wp-content/uploads/2019/06/avatarka_dlya_devushki_.jpg\" alt=\"some user\"/>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./MyPosts/Post/Post\";\r\nimport {PostType} from \"../Redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../Utils/Validators/validators\";\r\nimport {Textarea} from \"../Common Components/FormsControls/FormsControls\";\r\n\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (values: string) => void\r\n}\r\n\r\ntype AddNewPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (values: AddNewPostFormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst maxLength = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" placeholder={\"Add new post\"} component={Textarea}\r\n                       validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n","import {addPostActionCreator, PostType} from \"../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from \"redux\";\r\nimport {StoreType} from \"../Redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StoreType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPostsContainer\";\r\nimport {ProfilePropsType} from './ProfileInfo/ProfileContainer';\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} isOwner={props.isOwner}\r\n                         status={props.status} updateStatus={props.updateStatusProfile}\r\n                         savePhoto={props.savePhoto} saveNewProfileData={props.saveNewProfileData}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile\r\n","import React, {ComponentType} from \"react\";\r\nimport Profile from \"../Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusProfile,\r\n    getUserProfile,\r\n    saveNewProfileData,\r\n    savePhoto,\r\n    updateStatusProfile\r\n} from \"../../Redux/profile-reducer\";\r\nimport {ProfileType} from \"../../Redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {StoreType} from \"../../Redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../HOC/AuthWithRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ParamType = {\r\n    userId: string\r\n}\r\ntype MSTPType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n\r\n\r\n}\r\ntype MDTPType = {\r\n    getUserProfile: (userId: string) => void,\r\n    getStatusProfile: (userId: string) => void,\r\n    updateStatusProfile: (status: string | null) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveNewProfileData: (formData: any) => void\r\n}\r\nexport type ProfilePropsType = MSTPType & MDTPType\r\n\r\ntype CommonPropsType = RouteComponentProps<ParamType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatusProfile(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         status={this.props.status}\r\n                         updateStatusProfile={this.props.updateStatusProfile}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: StoreType): MSTPType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status ? state.profilePage.status : \"\",\r\n    authorizedUserId: state.authState.id,\r\n    isAuth: state.authState.isAuth\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(MapStateToProps, {getUserProfile, getStatusProfile, updateStatusProfile, savePhoto, saveNewProfileData}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}