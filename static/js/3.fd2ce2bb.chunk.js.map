{"version":3,"sources":["HOC/AuthWithRedirect.tsx","Profile/ProfileInfo.module.css","Profile/MyPosts.module.css","Profile/MyPosts/Post/Post.module.css","Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Profile/ProfileInfo/ProfileInfo.tsx","Profile/MyPosts/Post/Post.tsx","Profile/MyPosts.tsx","Profile/MyPostsContainer.tsx","Profile/Profile.tsx","Profile/ProfileInfo/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","authState","WithAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","isOwner","savePhoto","Preloader","className","s","descriptionBlock","src","photos","large","userPhoto","alt","mainPhoto","type","target","files","length","Post","item","message","likesCount","MyPosts","React","memo","postsElements","posts","reverse","map","p","postsBlock","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","maxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","updateStatusProfile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatusProfile","refreshProfile","prevProps","compose","id","withRouter"],"mappings":"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","file":"static/js/3.fd2ce2bb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../Redux/redux-store\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.authState.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent;\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ProfileInfo_img__2BcLQ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3wsbG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3gZQt\",\"posts\":\"MyPosts_posts__1Ns4x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__xU5gN\"};","import React, {useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string | null) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus onBlur={deactivateEditMode} onChange={onStatusChange}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from '../ProfileInfo.module.css';\r\nimport Preloader from \"../../Common Components/Preloader/Preloader\";\r\nimport {ProfileType} from '../../Redux/profile-reducer';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../Assets/Images/people.png'\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string | null) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({profile, status, updateStatus, isOwner, savePhoto}) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // @ts-ignore\r\n        if (e.target.files.length) {\r\n            // @ts-ignore\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} alt={'nice view'} className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype MessageType = {\r\n    message: string;\r\n    likesCount: number;\r\n}\r\n\r\nconst Post: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img src=\"https://it-doc.info/wp-content/uploads/2019/06/avatarka_dlya_devushki_.jpg\" alt=\"some user\"/>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./MyPosts/Post/Post\";\r\nimport {PostType} from \"../Redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../Utils/Validators/validators\";\r\nimport {Textarea} from \"../Common Components/FormsControls/FormsControls\";\r\n\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (values: string) => void\r\n}\r\n\r\ntype AddNewPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (values: AddNewPostFormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst maxLength = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" placeholder={\"Add new post\"} component={Textarea}\r\n                       validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n","import {addPostActionCreator, PostType} from \"../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from \"redux\";\r\nimport {StoreType} from \"../Redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StoreType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPostsContainer\";\r\nimport {ProfilePropsType} from './ProfileInfo/ProfileContainer';\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} isOwner={props.isOwner}\r\n                         status={props.status} updateStatus={props.updateStatusProfile}\r\n                         savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile\r\n","import React, {ComponentType} from \"react\";\r\nimport Profile from \"../Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusProfile, getUserProfile, savePhoto, updateStatusProfile} from \"../../Redux/profile-reducer\";\r\nimport {ProfileType} from \"../../Redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {StoreType} from \"../../Redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../HOC/AuthWithRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ParamType = {\r\n    userId: string\r\n}\r\ntype MSTPType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n\r\n\r\n}\r\ntype MDTPType = {\r\n    getUserProfile: (userId: string) => void,\r\n    getStatusProfile: (userId: string) => void,\r\n    updateStatusProfile: (status: string | null) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n}\r\nexport type ProfilePropsType = MSTPType & MDTPType\r\n\r\ntype CommonPropsType = RouteComponentProps<ParamType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            //userId = '2'\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatusProfile(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         status={this.props.status}\r\n                         updateStatusProfile={this.props.updateStatusProfile}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: StoreType): MSTPType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status ? state.profilePage.status : \"\",\r\n    authorizedUserId: state.authState.id,\r\n    isAuth: state.authState.isAuth\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(MapStateToProps, {getUserProfile, getStatusProfile, updateStatusProfile, savePhoto}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}