{"version":3,"sources":["Dialogues/Dialogs.module.css","HOC/AuthWithRedirect.tsx","Dialogues/DialogItem/DialogsItem.tsx","Dialogues/Message/Message.tsx","Dialogues/AddMessageForm/AddMessageForm.tsx","Dialogues/Dialogs.tsx","Dialogues/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","authState","WithAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","s","dialogue","active","name","Message","message","maxLength","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogItems","values","onSendMessageClick","newMessageBody","compose","dispatch","SendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oHCS1KC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,UAAUD,SAIzB,SAASE,EAAoBC,GAWhC,OAFiCC,YAAQN,EAARM,EAPP,SAACC,GAAgC,IAClDL,EAAwBK,EAAxBL,OAAWM,EADsC,YACzBD,EADyB,YAGtD,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,6FCJ3BC,EARI,SAACH,GAChB,IAAII,EAAO,YAAcJ,EAAMK,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,SAAW,IAAMD,IAAEE,OAArC,SACH,cAAC,IAAD,CAASP,GAAIE,EAAb,SAAoBJ,EAAMU,UCHnBC,EAJC,SAACX,GACb,OAAO,qBAAKM,UAAWC,IAAEK,QAAlB,SAA4BZ,EAAMY,W,iCCEhCC,EAAYC,YAAiB,IAiB7BC,EAAsBC,YAA8B,CAACC,KAAM,wBAArCD,EAfqC,SAAChB,GACrE,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,iBAAiBa,YAAY,qBACvDC,SAAU,CAACC,IAAUZ,OAGhC,8BACI,kDCiCDa,EAzCC,SAAC1B,GAEb,IAAI2B,EAAkB3B,EAAM4B,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAML,GAAI0B,EAAE1B,QACrF2B,EAAmBhC,EAAM4B,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,aAM/E,OACI,sBAAKN,UAAWC,IAAEsB,QAAlB,UACI,qBAAKvB,UAAWC,IAAE4B,YAAlB,SACKR,IAEL,qBAAKrB,UAAWC,IAAE0B,SAAlB,SACI,8BAAMD,MAEV,cAACjB,EAAD,CAAqBG,SAZT,SAACkB,GACjBpC,EAAMqC,mBAAmBD,EAAOE,uB,wBCgBzBC,sBACXxC,aAfoB,SAACL,GACrB,MAAO,CACHkC,YAAalC,EAAMkC,gBAIA,SAACY,GACxB,MAAO,CACHH,mBAAoB,SAACC,GACjBE,EAASC,YAAmBH,SAOpCzC,IAFW0C,CAGbb","file":"static/js/4.0d48fdcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__gvNI8\",\"dialogItems\":\"Dialogs_dialogItems__3DEU6\",\"active\":\"Dialogs_active__2C5BE\",\"messages\":\"Dialogs_messages__2RRX9\",\"message\":\"Dialogs_message__qMEBv\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../Redux/redux-store\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.authState.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent;\r\n\r\n}\r\n","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialogue + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\nconst Message = (props: MessageType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n    }\r\n\r\nexport default Message;\r\n","import {maxLengthCreator, required} from \"../../Utils/Validators/validators\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../Common Components/FormsControls/FormsControls\";\r\n\r\nexport type FormAddMessageType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const maxLength = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormAddMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter your message\"\r\n                       validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormAddMessageType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport \"./Dialogs.module.css\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport { AddMessageReduxForm } from './AddMessageForm/AddMessageForm';\r\n\r\nexport type FormAddMessageType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message}/>);\r\n\r\n    let addNewMessage = (values: FormAddMessageType) => {\r\n        props.onSendMessageClick(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*export const maxLength = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormAddMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter your message\"\r\n                       validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormAddMessageType>({form: 'dialogAddMessageForm'})(AddMessageForm)*/\r\n\r\nexport default Dialogs;\r\n","import \"./Dialogs.module.css\";\r\nimport {\r\n    InitialDialogType,\r\n    SendMessageCreator,\r\n} from \"../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from 'react-redux'\r\nimport {StoreType} from \"../Redux/redux-store\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport {WithAuthRedirect} from '../HOC/AuthWithRedirect';\r\nimport {ComponentType} from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialDialogType,\r\n}\r\ntype MapDispatchPropsType = {\r\n    onSendMessageClick: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\nconst mapStateToProps = (state: StoreType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        onSendMessageClick: (newMessageBody) => {\r\n            dispatch(SendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);\r\n\r\n\r\n"],"sourceRoot":""}